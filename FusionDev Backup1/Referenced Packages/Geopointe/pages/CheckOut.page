<apex:page controller="geopointe.CheckOut_Controller" extensions="geopointe.RemoteAction" action="{!init}" showHeader="false" sidebar="false" standardstylesheets="false" docType="html-5.0">
	
	<head>
		<title>Check Out - {!SobjectName}</title>
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
	</head>

	<apex:stylesheet value="https://fonts.googleapis.com/css?family=Montserrat"/><!-- Custom font to match sf1 style -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/sf1/css/sf1.css')}"/><!-- Geopointe sf1 css -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/sf1/css/checkin.css')}"/><!-- Geopointe sf1 check in css -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/sf1/lib/jquery-2.0.3.min.js')}"/><!-- jQuery -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/sf1/js/sf1.js')}"/><!-- Geopointe sf1 functions -->
	<apex:includeScript value="/canvas/sdk/js/publisher.js"/> <!-- Interact with sf1 wrapper -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__js_api_v1)}"/> <!-- Geopointe Javascript api -->
	<script src="{!URLFOR($Resource.jquery, '/js/lib/bluebird-3.4.7.min.js')}"></script> <!-- Promises -->

	<!-- only load this if inside the geopointe map page 
	<apex:outputPanel rendered="{!$CurrentPage.parameters.sfdcIframeHost == ''}">
		<link rel="stylesheet" href="{!URLFOR($Resource.jquery, 'sf1/css/androidSelect.css')}"/>
   		<script src="{!URLFOR($Resource.jquery, 'sf1/js/androidSelect.js')}"></script>
	</apex:outputPanel>-->

	<script type="text/javascript">
		var gpRemoteAction = '{!$RemoteAction.RemoteAction.doRemoteAction}';
	</script>

	<apex:form >
	<div class="container iosBlankScreenFix">

		<div id="checkinForm">
			<apex:outputPanel rendered="{!NOT(checkInRecordFound)}">
				<div class="infoBox">
					<div class="infoBoxHeader">
						<div class="infoBoxHeaderIconWrapper">
							<span class="infoBoxHeaderIcon warning">!</span>
						</div>
						<div class="infoBoxHeaderMessage">Unable to Check Out</div>
					</div>
				</div>
				<div id="checkInRequired">
					You must Check In before you can Check Out.
				</div>
			</apex:outputPanel>

			<!-- Show if we found a check in record to check out of -->
			<apex:outputPanel rendered="{!checkInRecordFound}">
				<apex:outputPanel layout="block" styleClass="checkinHeader" rendered="{!$CurrentPage.parameters.inline != '1'}">
					{!SobjectName}
				</apex:outputPanel>

				<apex:outputPanel id="inputForm">
				
					<apex:pageMessages />

					<apex:outputPanel layout="none" rendered="{!showNotes}">
						<div class="fieldLabel">{!$Label.Notes}</div>
						<textarea id="checkinInput" class="size-full" type="text"></textarea>
					</apex:outputPanel>

					<apex:outputPanel layout="none" rendered="{!settings2.geopointe__Checkout_Share_on_Feed_Visbility__c == 'visible'}">
						<div style="display:{!IF(doQuickCheckOut,'none','block')}; margin-bottom: -5px;">
							<div class="fieldLabel" for="shareOnChatter">{!$Label.geopointe__share_on_feed}</div>
							<apex:outputPanel rendered="{!shareCheckInOnFeed}">
								<input type="checkbox" id="shareOnChatter" checked="checked"></input>
							</apex:outputPanel>
							<apex:outputPanel rendered="{!NOT(shareCheckInOnFeed)}">
								<input type="checkbox" id="shareOnChatter"></input>
							</apex:outputPanel>			
						</div>
					</apex:outputPanel>

					<div id="fieldSet" style="display:{!IF(doQuickCheckOut, 'none', 'block')}">
						<apex:outputPanel rendered="{!checkOutFieldSetName != ''}">
							<apex:repeat value="{!fieldSetToUse}" var="f">
								<apex:outputPanel styleClass="fieldLabel" layout="block" rendered="{!CONTAINS(f.fieldPath, '.')}">{!f.fieldPath}: Check Out Field Set cannot support lookup fields.</apex:outputPanel>

								<apex:outputPanel styleClass="fieldLabel" layout="block" rendered="{!AND(f.fieldPath != 'RecordTypeId', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Createable)}">
									<apex:outputPanel rendered="{!f.required}" styleClass="errorMsg">*</apex:outputPanel>
									{!IF(f.fieldPath == 'geopointe__Why_Text__c','Notes',f.label)}
								</apex:outputPanel>

								<apex:outputPanel rendered="{!AND(NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Type != 'multipicklist')}">
									<apex:inputField styleClass="input" type="{!IF(f.type == 'boolean', '', 'auto')}" value="{!checkInFields[f.fieldPath]}" required="{!OR(f.required, f.dbrequired)}" 
									rendered="{!AND(f.fieldPath != 'RecordTypeId',f.fieldPath != 'geopointe__Why_Text__c', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Createable)}"/>

									<!-- Special Handline for Why Text (Notes) -->
									<apex:inputTextArea styleClass="input" value="{!checkInFields[f.fieldPath]}" required="{!OR(f.required, f.dbrequired)}" 
									rendered="{!AND(f.fieldPath = 'geopointe__Why_Text__c', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Createable)}"/>
								</apex:outputPanel>
								
								<apex:outputPanel rendered="{!AND(NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Type == 'multipicklist')}" styleClass="multiSelectWrapper">
									<apex:inputField styleClass="input" id="gpMulti" value="{!checkInFields[f.fieldPath]}" required="{!OR(f.required, f.dbrequired)}" rendered="{!AND(f.fieldPath != 'RecordTypeId', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.geopointe__Check_In__c.Fields[f.fieldPath].Createable)}"/>
								</apex:outputPanel>
		
							</apex:repeat>
						</apex:outputPanel>
					</div>
				
					<div id="taskFieldSet" style="display:{!IF(doQuickCheckOut,'none','block')};">
						<apex:outputPanel rendered="{!checkOutTaskFieldSetName != ''}">
							<apex:repeat value="{!taskFieldSetToUse}" var="f">
								<apex:outputPanel styleClass="fieldLabel" layout="block" rendered="{!CONTAINS(f.fieldPath, '.')}">{!f.fieldPath}: Check Out Task Field Set cannot support lookup fields.</apex:outputPanel>

								<apex:outputPanel styleClass="fieldLabel" layout="block" rendered="{!AND(f.fieldPath != 'RecordTypeId', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.Task.Fields[f.fieldPath].Createable)}">
									<apex:outputPanel rendered="{!f.required}" styleClass="errorMsg">*</apex:outputPanel>
									{!f.label}
								</apex:outputPanel>
								<apex:outputPanel rendered="{!AND(NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.Task.Fields[f.fieldPath].Type != 'multipicklist')}">
									<apex:inputField styleClass="input" value="{!fieldBag[f.fieldPath]}" required="{!OR(f.required, f.dbrequired)}" rendered="{!AND(f.fieldPath != 'RecordTypeId', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.Task.Fields[f.fieldPath].Createable)}"/>
								</apex:outputPanel>

								<apex:outputPanel rendered="{!AND(NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.Task.Fields[f.fieldPath].Type == 'multipicklist')}" styleClass="multiSelectWrapper">
									<apex:inputField styleClass="input" id="gpMulti" value="{!fieldBag[f.fieldPath]}" required="{!OR(f.required, f.dbrequired)}" rendered="{!AND(f.fieldPath != 'RecordTypeId', NOT(CONTAINS(f.fieldPath, '.')), $ObjectType.Task.Fields[f.fieldPath].Createable)}"/>
								</apex:outputPanel>
							</apex:repeat>
						</apex:outputPanel>
					</div>

				</apex:outputPanel>

				<div id="checkinMapWrapper" style="height:{!IF(checkOutHideMap, '0px', '145px')}">
				  <apex:outputPanel rendered="{!NOT(checkOutHideMap)}">
					<div id="retryGetPositionButton" onclick="retryGetPosition();" />
					<div>
						<img id="userLocationImg" class="checkinMap" width="{!IF($CurrentPage.parameters.inline == '1','320','0')}px" src=""/>
					</div>
					<div id="placeholderWrapper">
						<img id="placeholder" class="checkinMap" width="{!IF($CurrentPage.parameters.inline == '1','320','0')}px" src="{!URLFOR($Resource.jquery, '/sf1/img/checkInBaseImg.png')}"/>
						
						<div class="spinnerWrapper">
							<div class="spinner loading"></div>
						</div>
					</div>
				  </apex:outputPanel>
				</div>

				<!-- SF1 action -->
				<apex:outputPanel layout="block" style="margin-bottom: 10px;" rendered="{!OR($CurrentPage.parameters.inline != '1', mockSf1)}">
					<button id="desktopCheckInBtn" class="btn btn-primary size-full" onclick="doCheckOut();return false;" disabled="disabled">{!$Label.Check_Out}</button>
				</apex:outputPanel>

				<!--Desktop chatter publisher action -->
				<apex:outputPanel layout="block" style="margin-bottom: 10px;" rendered="{!$CurrentPage.parameters.inline == '1'}">
					<button id="desktopLocateMeBtn" class="btn btn-primary size-full" onclick="getLatLng();">Locate Me</button> <!-- TODO translation -->
					<button id="desktopCheckInBtn" class="btn btn-primary size-full" onclick="doCheckOut();return false;" style="display:none;" disabled="disabled">{!$Label.Check_Out}</button>
				</apex:outputPanel>
			</apex:outputPanel>
		</div>
	</div>

	<canvas id="mapCanvas" style="display:none;" width="640" height="300"></canvas> 

		<apex:actionFunction name="doCheckOutAction" reRender="checkOutCompleteScript,inputForm" action="{!doCheckOut}">
			<apex:param name="checkOutJSON" value="" assignTo="{!checkOutJSON}"/>
		</apex:actionFunction>

	</apex:form>

	<apex:outputPanel id="checkOutCompleteScript">
		<script type="text/javascript">
			var checkOutResultJSON = '{!JSENCODE(checkOutResultJSON)}';
			
			sf1.hideModalStatus();

			if(checkOutResultJSON){
				handleCheckOutResult(JSON.parse(checkOutResultJSON));
			}
		</script>
	</apex:outputPanel>

	<apex:outputPanel id="setUserLocationImage">
		<script type="text/javascript">
			var checkInRecordFound = {!checkInRecordFound};
			var doQuickCheckOut = {!doQuickCheckOut};
			var hideMapChecked = {!checkOutHideMap};
			var isIOS = {!isIOS};

			/**
			 * set the location image if necessary and enable the check in button or auto check in
			 * @param {String} signedImageURL signed image url to use for the location image
			 * @return {void}
			 */
			function setLocationImage(signedImageURL) {
				if (signedImageURL.indexOf('Error') === 0) {
					sf1.addPageMessage({
						prependTo: '.container',
						title: 'An error occurred',
						message: signedImageURL,
						severity: 'error'	
					});
					jQuery('.spinner').hide();
					jQuery('#checkinForm').hide();
					jQuery('#taskFieldSet').hide();
				}
				else if (signedImageURL != '' && checkInRecordFound == true) {
					//Hide the locate me button and show the checkin button
					$("#desktopLocateMeBtn").hide();
					$("#desktopCheckInBtn").show();

					img = new Image();
					img.crossOrigin = "Anonymous";

					var enableCheckOutUI = function() {
						if({!PostCheckOutImagetoFeed}){
							if (hideMapChecked) {
								base64image = null;
							}
							else {
								ctx.drawImage( img, 0, 0 );
								var dataURL = cvs.toDataURL('image/jpeg',0.75);
								base64image = dataURL.substring(23, dataURL.length);
							}
						}
						
						//Show the image of current location, enable the checkin button
						if (!hideMapChecked && signedImageURL) {
							jQuery("#userLocationImg").attr('src',signedImageURL).show();
							$('#retryGetPositionButton').show();
						}
						jQuery("#placeholderWrapper").addClass("transparent");
						jQuery("#checkinBtn,#desktopCheckInBtn").prop("disabled",false);
						
						try{
							Sfdc.canvas.publisher.publish({name: "publisher.setValidForSubmit", payload:"true"});
						}catch(e){}

						//If quick check out is enabled do the check out
						if(doQuickCheckOut){
							doCheckOut();
						}
					}

					if (!hideMapChecked && signedImageURL) {
						img.onload = enableCheckOutUI;
						img.src = signedImageURL;
					}
					else {
						enableCheckOutUI();
					}
				}
			}
		</script>
	</apex:outputPanel>


	<script type="text/javascript">
		var lat, lng, userLocationImgSrc, accuracy;

		var placeId = '{!JSENCODE($CurrentPage.parameters.placeId)}';

		var gp_translations = {
			Checking_Out: "{!JSENCODE($Label.Checking_Out)}",
			Check_Out_Successful: "{!JSENCODE($Label.Check_Out_Successful)}",
			Please_ensure_GPS_functionality: "{!JSENCODE($Label.Please_ensure_GPS_functionality)}",
			Unable_to_access_GPS: "{!JSENCODE($Label.Unable_to_access_GPS)}",
			Unable_to_Check_Out: "{!JSENCODE($Label.Unable_to_Check_Out)}",
			Unable_to_locate_position: "{!JSENCODE($Label.Unable_to_locate_position)}",
			Unable_to_locate_position_due_to_timeout: "{!JSENCODE($Label.Unable_to_locate_position_due_to_timeout)}"
		}

		var mockSf1 = {!mockSf1};
		var retURL = '{!JSENCODE($CurrentPage.parameters.retURL)}';

		//Vars to create base64 image
		var img = new Image;
		img.crossOrigin = "Anonymous";
		var cvs = document.getElementById('mapCanvas');
		var ctx = cvs.getContext('2d');
		var base64image;
		var isInline = '{!JSENCODE($CurrentPage.parameters.inline)}';

		function setupMultiSelectMobile(){
			jQuery(".multiSelectWrapper").each(function(){
				//Find select lists that end with 'unseleted'
				jQuery(this).find("select[id$='gpMulti']").show();
				jQuery(this).find('.multiSelectPicklistTable').hide();

				//Add empty select option to resolve this issue http://stackoverflow.com/questions/34660500/mobile-safari-multi-select-bug, again iOS acting strange
				if(isIOS){
					jQuery(this).find("select[id$='gpMulti']").prepend('<option disabled="disabled"></option>');
				}
			});
		}

		jQuery(document).ready(function(){

			//Set height of parent container window
			geopointe.api.setActionHeight({height: jQuery("body").height()});

			//Set width of images to size of screen so there is no weird horizontal scrolling, only do this if not on desktop
			if('{!JSENCODE($CurrentPage.parameters.inline)}' != '1'){
				var mapImgWidth = 320;
				var pageWidth = jQuery('body').width();
				if(pageWidth < mapImgWidth){
					mapImgWidth = pageWidth;
				}
				jQuery(".checkinMap").width(mapImgWidth);
			}

			if(mockSf1) setupMultiSelectMobile();

			//Create event listener for sf1 submit button
			try{
				Sfdc.canvas.publisher.subscribe({name: "publisher.post", onData:function(e){
	    			doCheckOut();
				}});
			}catch(e){}

			//Get the users position onload only if this is not inline (web version)
			if(isInline != '1' || mockSf1 == true || hideMapChecked){
				getLatLng();
			}

			function setHeight(){
				var height = jQuery(window).height();

				if(height == 0){
					setTimeout(function(){ //Ensures the page conent has loaded, else height sometimes gets set to 0
						setHeight();
					},250);
				}else{
					jQuery('.container').parent().height(jQuery(window).height()).addClass('overflowScroll');
				}
			}

			//If inline set max height and overflow
			if(isInline == '1'){
				setHeight();
			}

		});

		//Keep track of how many times we attempt to get lat lng
		var getLatLngAttempts = 0;

		function retryGetPosition(event){
			//Remove existing error messages
			sf1.clearPageMessages();

			if(event) event.preventDefault();

			//Attempt to get location again
			getLatLng();
		}

		/**
		 * sign the user location image
		 * @param  {String} url url for the location image to sign
		 * @return {Promise}    promise that resolves with the signed url
		 */
		function signGoogleURL(url) {
			return new Promise(function (resolve, reject) {
				Visualforce.remoting.Manager.invokeAction(gpRemoteAction, 'CheckOut_Controller.signGoogleURL', {url: url}, function (result, event) {
					if (event.status) {
						resolve(result);
					} else {
						reject(event.message);
					}
				}, {escape: false, timeout: 120000, buffer: false});
			});
		}

		function getLatLng(){
			getLatLngAttempts++;

			//Disable the check in buttons
			$("#desktopLocateMeBtn").prop("disabled",true);
			$("#checkinBtn,#desktopCheckInBtn").prop("disabled",true);
			try{ Sfdc.canvas.publisher.publish({name: "publisher.setValidForSubmit", payload:"false"}); }catch(e){}
			$('#retryGetPositionButton').hide();
			
			//Show the loading image and spinner
			$('#userLocationImg').hide();
			$("#placeholderWrapper").removeClass("transparent");
			$(".spinnerWrapper").show();

			if(navigator.geolocation) {
				//Get user position
				navigator.geolocation.getCurrentPosition(

					function(position){//Sucess

						//If this is the first for getting user location, stop and try again, nasty iOS bug where first request does not always work correctly
						if(isIOS && getLatLngAttempts == 1){
							getLatLng();
							return false;
						}

						lat = position.coords.latitude;
						lng = position.coords.longitude;
						accuracy = position.coords.accuracy;

						userLocationImgSrc = 'https://{!JSENCODE(baseGoogleURL)}/maps/api/staticmap?center='+position.coords.latitude+','+position.coords.longitude+
											'&markers='+position.coords.latitude+','+position.coords.longitude+'&zoom=13&size=320x150&scale=2';

						//Sign the image on the server and in response set the image on the page by rerendering script
						signGoogleURL(userLocationImgSrc)
						.then(setLocationImage)
						.catch(function (err) {
							sf1.addPageMessage({
								prependTo: '.container',
								title: gp_translations.Unable_to_locate_position,
								message: err,
								severity: 'error'	
							});
							jQuery('.spinner').hide();
						});
					},
					function(error){//Error
						var message = '';
						if(error.code == 1){
							message = gp_translations.Unable_to_access_GPS;
						}else if(error.code == 2){
							message = gp_translations.Unable_to_locate_position;
						}else if(error.code == 3){
							message = gp_translations.Unable_to_locate_position_due_to_timeout;
						}

						var tryAgain = ' <a href=#" onclick="retryGetPosition(event);">Try again.</a>';

						sf1.addPageMessage({
							prependTo: '.container',
							title: gp_translations.Unable_to_locate_position,
							message: message + tryAgain,
							severity: 'error'	
						});
						jQuery('.spinner').hide();
					},
					{ //Geolocation options
						enableHighAccuracy: true, 
						maximumAge        : 0, 
						timeout           : 30000
					}
				);
			}else{
				//Doesn't have geolocation capabilities
				sf1.addPageMessage({
					prependTo: '.container',
					title: gp_translations.Unable_to_locate_position,
					message: gp_translations.Please_ensure_GPS_functionality,
					severity: 'error'	
				});
				jQuery('.spinner').hide();
			} 
		}

		function doCheckOut(){
			//Show ajax status
			sf1.showModalStatus({message:gp_translations.Checking_Out});

			//Create a CheckIn object (CheckIn.cls)
			var CheckIn = { 
				id: '{!JSENCODE(checkInRecord.id)}',
				whatId: '{!JSENCODE(recordId)}',
				whatText: '{!JSENCODE(SobjectName)}',
				whereLat: lat,
				whereLng: lng,
				accuracy: accuracy,
				whyText: jQuery("#checkinInput").val(),
				chatterThis: jQuery("#shareOnChatter").is(':checked'),
				base64image: base64image,
				placeId: placeId
			};

			//Call action function to do check in
			doCheckOutAction(JSON.stringify(CheckIn));
		}

		function handleCheckOutResult(checkOutResult){

			if(checkOutResult.success){
				//Hide the modal
				sf1.hideModalStatus();
				sf1.disableSf1Submit(); //Make sure button stays disabled after success to prevent double checkin

				//Clear existing error messages before adding success message
				sf1.clearPageMessages();

				//Show success message, TODO
				sf1.addPageMessage({
					prependTo: 'body',
					title: gp_translations.Check_Out_Successful,
					severity: 'success'	,
					centerInWindow: true	
				});

				//Hide the checkin form
				jQuery("#checkinForm").hide();
				jQuery("#taskFieldSet").hide();

				//Auto close checkin page, after 2-3 seconds
				setTimeout(function(){sf1.closeWindow()},1300);

				if(retURL){
					setTimeout(function(){
						window.location.href = retURL;
					},1000);

				}else{
					//Try to close the current window, this will only work for popups
					setTimeout(function(){
						try{
							window.close();
							geopointe.api.closeAction();
						}catch(e){}
					},1200);
				}
				
			}else{
				sf1.hideModalStatus();

				//Clear existing error messages before show new error messages
				sf1.clearPageMessages();
				
				//Show error message
				var errorMsg = checkOutResult.message;
				if(checkOutResult.messageShort){
					errorMsg = checkOutResult.messageShort;
				}

				sf1.addPageMessage({
					prependTo: '.container',
					title: gp_translations.Unable_to_Check_Out,
					message: errorMsg,
					severity: 'error'		
				});
			}
		}

		//Workaround for input area issue https://success.salesforce.com/issues_view?id=a1p30000000T5l1AAC
		window.onkeydown=function(){window.focus();} 
	</script>
</apex:page>