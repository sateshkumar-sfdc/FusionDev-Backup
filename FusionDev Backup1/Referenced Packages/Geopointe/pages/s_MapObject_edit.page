<apex:page controller="geopointe.s_MapObject" extensions="geopointe.RemoteAction,geopointe.Localization" tabStyle="Geopointe_Setup__tab" sidebar="false" title="Geopointe - Map Object - {!IF(mapObjectDisplayName != '',mapObjectDisplayName,'New')}">

	<script src="//cdnjs.cloudflare.com/ajax/libs/jsforce/1.7.0/jsforce.min.js"></script>

	<apex:stylesheet value="https://fonts.googleapis.com/css?family=Open+Sans:400,600,700"/> <!-- open sans font -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/ui/css/smoothness/jquery-ui-1.9.2.custom.min.css')}"/> <!-- jQuery UI CSS -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/fieldSelector/css/fieldselector.css')}"/> <!-- FieldSelector plugin CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/plugins/minicolor/jquery.minicolors.css')}"/> <!-- Color picker plugin CSS -->
	<apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/css/common/common.css')}"/> <!-- Common geopointe CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/lib/maki/maki-sprite.css')}"/> <!-- Maki icon css -->
	
	<apex:includeScript value="{!URLFOR($Page.geopointe__translations)}"/> <!-- Geopointe translations -->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/jquery-2.2.4.min.js')}" /> <!-- core jQuery (was 1.8.3 before Icon Picker assets added below)-->
	<apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/ui/js/jquery-ui-1.9.2.custom.min.js')}" /> <!-- jQuery UI -->
    <apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/fieldSelector/jquery.fieldselector.js')}"/> <!-- fieldSelector plugin -->
	<apex:includeScript value="{!$Resource.geopointe__GeopointeJS}" /> <!-- Geopointe universal functions -->
	<apex:includeScript value="{!$Page.geopointe__js_GA}" /> <!-- Google Analytics -->	
	<c:walkMeSnippet />
	
	<!-- Icon picker assets -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/angular-1.5.8.min.js')}"></script> <!-- Angular -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/angular-animate-1.5.8.min.js')}"></script>
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/angular-cookies-1.5.8.min.js')}"></script> <!-- Angular -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/locales/angular-locale_'& angularLocaleForCurrentUser &'.js')}"></script> <!-- Angular -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/lib/date.js')}"></script>  <!-- Angular jQuery UI date picker-->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/moment/moment.min.js')}"></script> <!-- Moment.js for time formatting -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/moment/moment-timezone.min.js')}"></script> <!-- Moment.js timezone functionality -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/moment/lang/'& momentJSLangForCurrentUser &'.js')}"></script> <!-- Moment.js language file -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/lib/angular-moment.min.js')}"></script> <!-- Angular Moment.js-->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/lib/select2.js')}"></script> <!-- Angular select2-->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular-ui-bootstrap/ui-bootstrap-tpls.js')}"></script>
    <script src="{!URLFOR($Resource.jquery, '/js/lib/angular/lib/ui.sortable.min.js')}"></script> <!-- Angular jQuery UI sortable-->

    <script src="{!URLFOR($Resource.jquery, '/plugins/minicolor/jquery.minicolors.js')}"></script> <!-- Color Picker -->
    <script src="{!URLFOR($Resource.jquery, '/lib/maki/maki.js')}"></script> <!-- Maki image metadata-->
    <script src="{!URLFOR($Resource.jquery, '/js/geopointeApp.js')}"></script> <!-- Starts the Angular geopointe app -->
    <script src="{!URLFOR($Resource.jquery, '/js/controllers/MarkerPickerController.js')}"></script> <!-- Starts the Angular geopointe app -->
    <script src="{!URLFOR($Resource.jquery, '/js/services/markerService.js')}"></script>

	<!--Style to hide input fields that send data to controller -->
	<style>
		.CSObjectValue{
			display: none;
		}
		.CSObjectPathValue{
			display: none;
		}

		.eventCheckboxList    { width: 500px; display: inline-block; margin-top: -5px; margin-left: -15px; }
		.eventCheckboxList td { width: 200px; float: left; }

		.checkInCheckboxList { display: inline-block; margin-top: -5px; }
		.checkInCheckboxList td {width: 230px; float: left; }
	</style>

	<script type="text/javascript">
		var gpRemoteAction = '{!$RemoteAction.RemoteAction.doRemoteAction}';
		// needed for markerSelector picker
		var gpImg = {
			center_pin2: '{!URLFOR($Resource.images, "center_pin2.png")}',
		    blackX: '{!URLFOR($Resource.images, "map/blackX.png" )}'
		};
	</script>
	
	<apex:sectionHeader title="Geopointe" subtitle="{! if(!invalidSObject, 'New Map Object', 'Edit Map Object: ' + mapObjectName) }" rendered="{! NOT(hasSelectedEntity) }"/>
	<apex:sectionHeader title="Geopointe" subtitle="Edit Map Object: {!mapObjectName}" rendered="{! hasSelectedEntity }"/>
	<apex:form >
		<apex:outputPanel id="breadcrumbDIV" layout="block" style="font-size: 8pt; margin: 0 0 3px 0;" >
			<apex:commandLink value="Â« Back to Geopointe Setup" action="{!return_MapConfig}" />
		</apex:outputPanel>

		<div id="modalWrapper">
		<apex:pageBlock id="pentity">
			
			<apex:pagemessages />
			
			<apex:pageblockbuttons >
				<apex:commandButton action="{!save}" value="Save" rerender="pentity" rendered="{! hasSelectedEntity && mapObjectName!='' && ((addrLocationSelection == 'self' && showNoLeadContactMessage == false) || addrLocationSelection == 'ref' || addrLocationSelection == 'pulse') }"  onclick="geopointeAjaxStart('#modalWrapper','Saving...');" oncomplete="saveComplete()"/>
				<apex:commandButton action="{!cancel}" value="Cancel"/>
			</apex:pageblockbuttons>
			<script type="text/javascript">var saveSuccessful = {!saveSuccessful}</script>
			<apex:actionFunction name="savePulse" action="{!savePulse}" reRender="pentity" oncomplete="savePulseComplete();"/>

			<apex:pageBlockSection title="States" columns="1" rendered="false">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="hasSelectedEntity"/>
					<apex:outputText value="{! hasSelectedEntity }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Map Object Name"/>
					<apex:outputText value="{! mapObjectName }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="SObject Name"/>
					<apex:outputText value="{! mapObjectSObjectName }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="moContext"/>
					<apex:outputText value="{! moContext }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="isGeoCodeSetup"/>
					<apex:outputText value="{! isGeoCodeSetup }"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="addrLocationSelection"/>
					<apex:outputText value="{! addrLocationSelection }"/>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			
			<apex:pageBlockSection title="{!objectNameSectionLabel}" collapsible="false" columns="1" id="objectNameSection">
				
				<apex:pageBlockSectionItem rendered="{!moContext = 'new'}">
					<apex:outputLabel value="Salesforce Object"/>
					<apex:outputPanel >
						
						<select id="mapObjectSelectList" onchange="populateInputField(event)"></select>
						<apex:inputText value="{!mapObjectSObjectName}" id="selectedObjectInput" style="display:none;"/>
						
						<apex:pageMessage rendered="{!isExternalObject}" severity="warning" summary="External Object support is a beta feature, things might not work as expected." title="Beta Warning:"/>

						<script type="text/javascript">
							
							var mapObjectOptions = JSON.parse('{!JSENCODE(objectListJSON)}');
							var selectedMapObject = '{!JSENCODE(mapObjectSObjectName)}';
							var selectHTML = '';
							
							mapObjectOptions.forEach(function(obj){
								
								selectHTML += '<option value="'+obj.Value+'"';

								if(obj.Value != '' && obj.Value == selectedMapObject){
									selectHTML += ' selected ';
								}

								selectHTML += '>'+obj.Name+'</option>';
							});
							
							jQuery("select[id$='mapObjectSelectList']").html(selectHTML); 

							function populateInputField(e){
								jQuery("input[id$='selectedObjectInput']").val(jQuery(e.target).val());

								//Call action function
								setupCSObjects();
							}
						</script>

						<apex:actionFunction name="setupCSObjects" action="{!setupCSObjects}" reRender="pentity,script,geocodeLocationBlock" oncomplete="createFieldSelectors();"/>

						<apex:outputPanel rendered="{!hasSelectedEntity && addrLocationSelection = 'self' && isExternalObject = false}" >
							&nbsp;<apex:inputCheckbox value="{!initGeocodeJob}"/>&nbsp;<b>Geocode this object upon successful Save</b>
						</apex:outputPanel>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!moContext = 'edit'}">
					<apex:outputLabel value="Salesforce Object"/>
					<apex:outputPanel >
						{!mapObjectSObjectName} <apex:pageMessage rendered="{!isExternalObject}" severity="warning" summary="External Object support is a beta feature, things might not work as expected." title="Beta Warning:"/>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!hasSelectedEntity}" >
					<apex:outputPanel >
						<b>Display Name</b>
					</apex:outputPanel>
					<apex:outputPanel >
						<apex:inputText maxlength="60" value="{!mapObjectDisplayName}" styleClass="moDisplayName" style="width: 210px;">
							<apex:actionSupport event="onchange" action="{!handleAddrLocationSelection}" onsubmit="populateAPIname();" oncomplete="createFieldSelectors();" rerender="pentity"/>
						</apex:inputText>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!hasSelectedEntity}">
					<apex:outputPanel >
						<b>API Name</b>
					</apex:outputPanel>
					<apex:outputPanel >
						<apex:inputText maxlength="38" value="{!mapObjectName}" rendered="{!moContext == 'new'}" styleClass="moAPIname" style="width: 210px;"/>&nbsp;
						<apex:outputText value="(Once saved, this cannot be changed.)" rendered="{!moContext == 'new'}" style="color: #797979;"/>
						<apex:outputText value="{!mapObjectName}" rendered="{!moContext == 'edit'}"/>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!hasSelectedEntity}">
					<apex:outputPanel >
						<b>Default Marker</b>
					</apex:outputPanel>
					<apex:outputPanel id="defaultIconSelector">
						<style>
							.topRightClose{
								float: right;
								cursor: pointer;
								opacity: 0.5;
								position: relative;
								padding: 2px;
							}
							.topRightClose:hover{
								opacity: 1.0;
							}
						</style>

						<!-- GeopointeApp manually bootstrapped to this element on render -->
					    <div id="ngApp" ng-controller="MarkerPickerController">
							<!-- img class="pointerCursor" ng-src="https://api.geopointe.io/v1/markers/pin-l-building+e60909.png" -->
							<img class="pointerCursor" src="{{resolveMarkerUrl(markerIcon,markerColor,markerText)}}" title="Click to Edit Marker"
								marker-selector="foo" marker-text-enc="markerText" marker-color="markerColor" marker-icon="markerIcon" style="width:33px;"/>
							<br/>

							<a href="#" ng-click="resetMarkerDisplay()">Reset</a>
							<!-- Hidden vars for updating s_MapObject -->
							<apex:inputText value="{!defaultMarkerColor}" id="defMarkColorInput" style="display:none"/>
							<apex:inputText value="{!defaultMarkerIcon}" id="defMarkIconInput" style="display:none"/>
							<apex:inputText value="{!defaultMarkerText}" id="defMarkTextInput" style="display:none"/>
						</div>

						<script type="text/javascript">
							// need to manually bootstrap GeopointeApp to handle rerenders
							angular.bootstrap(angular.element('#ngApp'), ['GeopointeApp']);
						</script>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				
			</apex:pageBlockSection>

			<apex:pageBlockSection title="Campaign Member Setup" rendered="{!mapObjectSObjectName == 'campaignmember'}" collapsible="false" columns="1">

				<apex:pageMessage severity="warning" strength="2" summary="
                    Mapping Campaign members requires special setup instructions. Please refer to this support page for mapping Campaign Members:<br/><br/>
                    <a style='font-size: 12px; color: #015BA7' href='http://help.geopointe.com/customer/portal/articles/1811007-map-campaign-members' target='_blank'>Mapping Campaign Members</a>
                "  escape="false"/>

				<apex:pageMessage severity="error" strength="2" rendered="{!showNoLeadContactMessage}" summary="To map Campaign Members you must first create an active Map Object for Leads or Contacts but typically both."/>
					
			</apex:pageBlockSection>

			<apex:pageBlockSection title="Geopointe Device Setup" rendered="{!isPrimaryPulseObject}" collapsible="false" columns="1">
				<apex:pageMessage severity="info" strength="2" summary="This is the main Geopointe Device Map Object. Some fields are not displayed and cannot be changed."/>
			</apex:pageBlockSection>

			<apex:pageBlockSection title="Where are the address fields located?" collapsible="false" columns="1" rendered="{!NOT(isPrimaryPulseObject) && hasSelectedEntity && NOT(showNoLeadContactMessage)}">
				
				<apex:pageBlockSectionItem >
					<apex:outputLabel />
					<apex:outputPanel layout="block" style="margin-bottom: -17px;">
						<apex:selectRadio value="{!addrLocationSelection}" layout="pageDirection" style="left: -15px; top: -8px; position: relative;">
							<apex:selectOption itemValue="self" itemLabel="The address fields are on this object." rendered="{!mapObjectSObjectName != 'accountcontactrelation'}" />
							<apex:selectOption itemValue="ref" itemLabel="The address fields are on a related Salesforce Object that already has a configured Geopointe Map Object."/>
							<apex:selectOption itemValue="pulse" itemLabel="This is a Geopointe Pulse Map Object." rendered="{!showPulse}"/>
							<apex:actionSupport event="onchange" action="{!handleAddrLocationSelection}" onsubmit="geopointeAjaxStart('#modalWrapper','Loading...',208);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();" rerender="pentity" status="locationSelection"/>
						</apex:selectRadio>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				
			</apex:pageBlockSection>				
					
			<apex:outputPanel id="CSList" rendered="{!hasSelectedEntity}" html-data-asdfadsf="">		
				
				<apex:outputPanel rendered="{!isSetupCSComplete && addrLocationSelection=='self' && showNoLeadContactMessage == false}" >
					<apex:pageBlockSection title="Define the input name and address fields Geopoine should use. (This is where Geopointe will read data from.)" collapsible="false" columns="2">   
						
						<apex:pageBlockSectionItem helpText="The field that acts as the 'title' of your record (e.g. Account Name, Opportunity Name, Case Number)">
							<apex:outputPanel >
								<b>{!NameCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="requiredInput" layout="block">
								<div class="requiredBlock"></div>
								<span class="selectedFieldNameOutput">{!IF( NameCSObject.pathvalue == NULL && NameCSObject.path == NULL,'Not Defined',NameCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!NameCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!NameCSObject.PathValue}" styleClass="CSObjectPathValue"/>                    
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Name Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName != 'campaignmember'}" helpText="If you store your own latitude and longitude values identify the Latitude field here. The Geocoder will prioritize values in this field over an address">
							<apex:outputPanel >
								<b>{!LatCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="{!IF(isExternalObject,'requiredInput','')}">
								<apex:outputPanel id="latitudeInfo">
									<apex:outputPanel layout="block" styleClass="requiredBlock" rendered="{!isExternalObject}"></apex:outputPanel>
									<span class="selectedFieldNameOutput">{!IF(LatCSObject.pathvalue==NULL && LatCSObject.path==NULL,'Not Defined',LatCSObject.value)}</span>&nbsp;
									<apex:inputText value="{!LatCSObject.value}" styleClass="CSObjectValue"/>
									<apex:inputText value="{!LatCSObject.PathValue}" styleClass="CSObjectPathValue"/>
									<a href="#" class="openFieldSelector latlng" data-dialogTitle="Select a Latitude Field">[change]</a>&nbsp;
									<a href="#" class="clearSelectedField">[clear]</a>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName == 'campaignmember'}"/>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!StreetCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StreetCSObject.pathvalue==NULL && StreetCSObject.path==NULL,'Not Defined',StreetCSObject.value)}</span>&nbsp;                 
								<apex:inputText value="{!StreetCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!StreetCSObject.PathValue}" styleClass="CSObjectPathValue"/>
								<a href="#" class="openFieldSelector addressField" data-dialogTitle="Select a Street Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName != 'campaignmember'}" helpText="If you store your own latitude and longitude values identify the Longitude field here. The Geocoder will prioritize values in this field over an address">
							<apex:outputPanel >
								<b>{!LongCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="{!IF(isExternalObject,'requiredInput','')}">
								<apex:outputPanel id="longitudeInfo">
									<apex:outputPanel layout="block" styleClass="requiredBlock" rendered="{!isExternalObject}"></apex:outputPanel>
									<span class="selectedFieldNameOutput">{!IF(LongCSObject.pathvalue==NULL && LongCSObject.path==NULL,'Not Defined',LongCSObject.value)}</span>&nbsp;
									<apex:inputText value="{!LongCSObject.value}" styleClass="CSObjectValue"/>
									<apex:inputText value="{!LongCSObject.PathValue}" styleClass="CSObjectPathValue"/>
									<a href="#" class="openFieldSelector latlng" data-dialogTitle="Select a Longitude Field">[change]</a>&nbsp;
									<a href="#" class="clearSelectedField">[clear]</a>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName == 'campaignmember'}"/>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!CityCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CityCSObject.pathvalue==NULL && CityCSObject.path==NULL,'Not Defined',CityCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CityCSObject.value}" styleClass="CSObjectValue"/>   
								<apex:inputText value="{!CityCSObject.PathValue}" styleClass="CSObjectPathValue"/>
								<a href="#" class="openFieldSelector addressField" data-dialogTitle="Select a City Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!StateCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StateCSObject.pathvalue==NULL && StateCSObject.path==NULL,'Not Defined',StateCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!StateCSObject.value}" styleClass="CSObjectValue"/>       
								<apex:inputText value="{!StateCSObject.PathValue}" styleClass="CSObjectPathValue"/>       
								<a href="#" class="openFieldSelector addressField" data-dialogTitle="Select a State Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel> 
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
						</apex:pageBlockSectionItem>
												
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!ZipCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel >								
								<span class="selectedFieldNameOutput">{!IF(ZipCSObject.pathvalue==NULL && ZipCSObject.path==NULL,'Not Defined',ZipCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!ZipCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!ZipCSObject.PathValue}" styleClass="CSObjectPathValue"/>         
								<a href="#" class="openFieldSelector addressField" data-dialogTitle="Select a Postal Code Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>{!CountryCSObject.name}</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CountryCSObject.pathvalue==NULL && CountryCSObject.path==NULL,'Not Defined',CountryCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!CountryCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!CountryCSObject.PathValue}" styleClass="CSObjectPathValue"/>               
								<a href="#" class="openFieldSelector addressField" data-dialogTitle="Select a Country Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
							
					</apex:pageBlockSection>
					
					<apex:pageBlockSection title="Define the output fields Geopointe should use. (This is where Geopointe will save the geocode data.)" collapsible="false" columns="1" id="geocodeLocationBlock" rendered="{!NOT(isExternalObject)}">
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Geocode Location</b>
								<div style="font-weight:normal;">What is the difference between 'On Record' and 'Off Record' Geocodes? 
									<a href="http://help.geopointe.com/customer/en/portal/articles/1811024-map-objects" target="_blank">Click here to learn more.</a>
								</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!usesOnRecordGeocoding}" multiselect="false" size="1" >
									<apex:selectOption itemLabel="On Record" itemValue="true"/>
									<apex:selectOption itemLabel="Off Record" itemValue="false"/>
									<apex:actionSupport event="onchange" reRender="CSList" oncomplete="createFieldSelectors();"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem rendered="{!showGeocodeLocatonChangeMessage}">
							<apex:pagemessage title="All {!mapObjectSObjectName} records may be edited" severity="warning" strength="1" > 
								Changing the location of the geocode data may update all geocoded {!mapObjectSObjectName} records. This could impact workflow, rules, triggers, and other automation. 
							</apex:pagemessage>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem rendered="{!AND( GeoFields.size > 0,NOT(usesOnRecordGeocoding))}">
							<apex:outputPanel >
								<b>Geocode Lookup Field</b>
								<div style="font-weight:normal;">This field points the Geopointe Geocode custom object.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!GeoCSObject.value}" multiselect="false" size="1">
									<apex:selectOptions value="{!GeoFields}"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem rendered="{!AND(GeoFields.size == 0,NOT(usesOnRecordGeocoding))}">   
							<apex:pagemessage title="A Geocode 'Lookup' field is required to use Off-Record Geocoding" severity="warning" strength="1" > 
								<p>To use off-record geocoding, Geopointe requires the {!mapObjectSObjectName} object to have a custom lookup field pointing to the 
								"Geocode" object that comes with Geopointe.</p>
								
								<p>To do this, configure this object in Setup and add a new field of type "Lookup Relationship" and have it point to the Geocode Object.
								See this support page for more detail: <b><a href="http://help.geopointe.com/customer/portal/articles/1811021-custom-map-object-setup" target="_blank" style="color: #015BA7">Setting up a Custom Object</a></b>.
								</p>
								
								<p>Group and Professional Edition customers need to also put this field on the object's Page Layout.</p>
								
								<p>Once you do this, come back here and configure the Map Object.</p>
							</apex:pagemessage>
						</apex:pageBlockSectionItem>
					</apex:pageBlockSection>

					<!-- On Record Geocode fields -->
					<apex:pageBlockSection rendered="{!usesOnRecordGeocoding && NOT(isExternalObject)}">

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Geolocation</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="requiredInput" layout="block">
								<div class="requiredBlock"></div>
								<span class="selectedFieldNameOutput">{!IF(OnRecordGeolocationCSObject.api==NULL,'Not Defined',OnRecordGeolocationCSObject.api)}</span>&nbsp;   
								<apex:inputText value="{!OnRecordGeolocationCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector location" data-dialogTitle="Select a Geo Location Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean Street</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StreetCleanCSObject.api==NULL,'Not Defined',StreetCleanCSObject.api)}</span>&nbsp;   
								<apex:inputText value="{!StreetCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean Street Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Geocode Quality</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="requiredInput" layout="block">
								<div class="requiredBlock"></div>
								<span class="selectedFieldNameOutput">{!IF(OnRecordGeocodeQualityCSObject.api==NULL,'Not Defined',OnRecordGeocodeQualityCSObject.api)}</span>&nbsp;   
								<apex:inputText value="{!OnRecordGeocodeQualityCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Geocode Quality Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean City</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CityCleanCSObject.api==NULL,'Not Defined',CityCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CityCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean City Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Geocode Date Time</b>
							</apex:outputPanel>
							<apex:outputPanel styleClass="requiredInput" layout="block">
								<div class="requiredBlock"></div>
								<span class="selectedFieldNameOutput">{!IF(OnRecordGeocodeDateTimeCSObject.api==NULL,'Not Defined',OnRecordGeocodeDateTimeCSObject.api)}</span>&nbsp;   
								<apex:inputText value="{!OnRecordGeocodeDateTimeCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector datetime" data-dialogTitle="Select a Geocode Date Time Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean County</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CountyCleanCSObject.api==NULL,'Not Defined',CountyCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CountyCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean County Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem ></apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean State</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(StateCleanCSObject.api==NULL,'Not Defined',StateCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!StateCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean State Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean Postal Code</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(PostalCodeCleanCSObject.api==NULL,'Not Defined',PostalCodeCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!PostalCodeCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean Postal Code Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean Country</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CountryCleanCSObject.api==NULL,'Not Defined',CountryCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CountryCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean Country Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem ></apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Clean ISO Country</b>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF(CountryISOCleanCSObject.api==NULL,'Not Defined',CountryISOCleanCSObject.value)}</span>&nbsp;   
								<apex:inputText value="{!CountryISOCleanCSObject.api}" styleClass="CSObjectValue"/>   
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Clean ISO Country Field">[change]</a>&nbsp;
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

					</apex:pageBlockSection>


	     
					<apex:pageBlockSection title="Advanced Options" collapsible="false" columns="1" rendered="{!mapObjectSObjectName != 'campaignmember'}">
					
						<apex:pageBlockSectionItem rendered="{!NOT(isExternalObject)}">
							<apex:outputPanel >
								<b>Map Object Filter</b>
								<div style="font-weight:normal;">A SOQL filter to limit the data that gets used in this Map Object. This filter will apply system-wide (geocoder, datasets, etc.)</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:inputText value="{!mapObjectSOQLFilter}" size="125" maxlength="255"/>
								<apex:outputPanel layout="block" style="padding: 3px 0px;" rendered="{!mapObjectSObjectName='lead'}">
									<apex:panelGrid columns="2">
										<apex:image url="{!URLFOR($Resource.geopointe__images, '/info.png')}"/>
										<apex:outputText value="A filter of 'IsConverted = False' is automatically applied to the Lead Map Object, so there is no need to include that here."/>
									</apex:panelGrid>
								</apex:outputPanel>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem rendered="{!NOT(isExternalObject)}">
							<apex:outputPanel >
								<b>Geocode Batch Size</b>
								<div style="font-weight:normal;">Sets the batch size for the Geocoder on this object. 100 is the default. Lower this value if your system has triggers that require a smaller batch size.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!GeocodeBatchSize}" multiselect="false" size="1">
									<apex:selectOption itemValue="1" itemLabel="1"/>
									<apex:selectOption itemValue="2" itemLabel="2"/>
									<apex:selectOption itemValue="3" itemLabel="3"/>
									<apex:selectOption itemValue="4" itemLabel="4"/>
									<apex:selectOption itemValue="5" itemLabel="5"/>
									<apex:selectOption itemValue="10" itemLabel="10"/>
									<apex:selectOption itemValue="20" itemLabel="20"/>
									<apex:selectOption itemValue="30" itemLabel="30"/>
									<apex:selectOption itemValue="40" itemLabel="40"/>
									<apex:selectOption itemValue="50" itemLabel="50"/>
									<apex:selectOption itemValue="100" itemLabel="100"/>
									<apex:selectOption itemValue="200" itemLabel="200"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem rendered="{!AND(showRealTimeGeocodeOption,NOT(isExternalObject))}">
							<apex:outputPanel >
								<b>Real Time Geocoding</b>
								<div style="font-weight:normal;">If enabled Geopointe will attempt to do real time geocoding when records are inserted or updated. It is 
								<strong>highly</strong> recommended to test this in a Sandbox before enabling in a production environment.
								</div>
							</apex:outputPanel>
							<apex:inputCheckbox value="{!RealTimeGeocode}"/>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Route Stop Time Field</b>
								<div style="font-weight:normal;">A Date/Time field that will be used to set the time on a Scheduled route stop.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( RouteStopTimeCSObject.pathvalue == NULL && RouteStopTimeCSObject.path == NULL,'Not Defined',RouteStopTimeCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!RouteStopTimeCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!RouteStopTimeCSObject.PathValue}" styleClass="CSObjectPathValue"/>                    
								<a href="#" class="openFieldSelector datetime" data-dialogTitle="Select a Route Time Field">[change]</a>
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Route Stop Duration Field</b>
								<div style="font-weight:normal;">A Formula field that calculates how long a route stop should be in minutes on a Scheduled route. A Record added to a route will use this value if it is populated on a record. Will be rounded to closest 15 minute mark of the hour.</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( RouteDurationCSObject.pathvalue == NULL && RouteDurationCSObject.path == NULL,'Not Defined',RouteDurationCSObject.value)}</span>&nbsp;
								<apex:inputText value="{!RouteDurationCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!RouteDurationCSObject.PathValue}" styleClass="CSObjectPathValue"/>                    
								<a href="#" class="openFieldSelector number" data-dialogTitle="Select a Route Duration Field">[change]</a>
								<a href="#" class="clearSelectedField">[clear]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
					</apex:pageBlockSection>
					
				</apex:outputPanel>
				
				<apex:outputPanel rendered="{!isSetupCSComplete && addrLocationSelection=='pulse' && NOT(showPulse)}" >
					Pulse has been deactivated.  Please reconfigure this map object.
				</apex:outputPanel>

				<apex:outputPanel rendered="{!(addrLocationSelection=='ref' || addrLocationSelection=='pulse') && !isPrimaryPulseObject}">	
					<apex:pageBlockSection title="Where should Geopointe look for information?" collapsible="false" columns="1">   
						
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName != 'accountcontactrelation'}">
							<apex:outputPanel >
								<b>{!NameCSObject.name}</b>
								<div style="font-weight:normal;">{!NameCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( NameCSObject.pathvalue == NULL && NameCSObject.path == NULL,'Not Defined',NameCSObject.value)}</span>&nbsp;     
								<apex:inputText value="{!NameCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!NameCSObject.PathValue}" styleClass="CSObjectPathValue"/>              
								<a href="#" class="openFieldSelector string" data-dialogTitle="Select a Name Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						<apex:pageBlockSectionItem rendered="{!mapObjectSObjectName == 'accountcontactrelation'}">
							<apex:outputPanel >
								<b>{!NameCSObject.name}</b>
								<div style="font-weight:normal;">{!NameCSObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<span class="selectedFieldNameOutput">{!IF( NameCSObject.pathvalue == NULL && NameCSObject.path == NULL,'Not Defined',NameCSObject.value)}</span>&nbsp;     
								<apex:inputText value="{!NameCSObject.value}" styleClass="CSObjectValue"/>
								<apex:inputText value="{!NameCSObject.PathValue}" styleClass="CSObjectPathValue"/>              
								<a href="#" class="openFieldSelector accconrel" data-dialogTitle="Select a Name Field">[change]</a>
							</apex:outputPanel>
						</apex:pageBlockSectionItem>

						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Referenced Map Object</b>
								<div style="font-weight:normal;">{!RefMapObjectHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!RefMapObject}" multiselect="false" size="1">
									<apex:selectOptions value="{!ReferencedMapObjects}"/>
									<apex:actionSupport event="onchange" action="{!handleAddrLocationSelection}" onsubmit="geopointeAjaxStart('#modalWrapper','Loading Fields...',208);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();" rerender="pentity"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
						<apex:pageBlockSectionItem >
							<apex:outputPanel >
								<b>Field Referring to the Map Object</b>
								<div style="font-weight:normal;">{!RefMapObjectRelationshipHelp}</div>
							</apex:outputPanel>
							<apex:outputPanel >
								<apex:selectList value="{!RefMapObjectRelationship}" multiselect="false" size="1" rendered="{!RefMapObject!=''}">
									<apex:selectOptions value="{!ReferencedMapObjectRelationship}"/>
								</apex:selectList> 
							</apex:outputPanel>
						</apex:pageBlockSectionItem>
						
					</apex:pageBlockSection>
				</apex:outputPanel>

				<apex:outputPanel id="pulseConfigSection" rendered="{!isSetupCSComplete && (addrLocationSelection=='pulse' || isPrimaryPulseObject) && showPulse}" >	     
					<apex:pageBlockSection title="Where will you configure Event Subscriptions and Check Ins/Outs?" collapsible="false" columns="2" rendered="{!customPulseObjectsExist || !isPrimaryPulseObject}"></apex:pageBlockSection>

					<!--apex:outputPanel layout="block" style="margin-bottom: -17px;"-->
					<div style="display:inline-block; width:300px; padding: 15px 30px 5px 240px; vertical-align: top;">
						<apex:selectRadio value="{!pulseSubscriptionInfoLocation}" layout="pageDirection" style="left: -15px; top: -8px; position: relative;">
							<apex:selectOption itemValue="device" itemLabel="Configure on Geopointe Device Map Object" />
							<apex:selectOption itemValue="custom" itemLabel="Configure on your custom Map Objects"/>
							<apex:actionSupport event="onchange" action="{!handlePulseSubscriptionLocationSelection}" onsubmit="geopointeAjaxStart('#modalWrapper','Loading...',208);" oncomplete="geopointeAjaxEnd(); createFieldSelectors();" rerender="pulseConfigSection" status="foo"/>
						</apex:selectRadio>
					</div>
					<!-- /apex:outputPanel-->

					<apex:outputPanel style="float:right; width:750px; padding-top: 5px;" rendered="{!(pulseSubscriptionInfoLocation == 'device' && isPrimaryPulseObject) || (pulseSubscriptionInfoLocation == 'custom' && !isPrimaryPulseObject)}">
						<apex:pagemessage title="Auto Check In/Out Information" severity="info" strength="1" > 
							When Auto Check In is enabled, upon an Ignition Off event, Geopointe will automatically create a check-in record for the closest record of the Map Object selected below within a 1/2 mile radius.  If no records exist within a 1/2 mile radius, no check-in record will be created.
							<p>
							When Auto Check Out is enabled, upon a Start Moving event, Geopointe will automatically check out of any records that were <b>automatically checked into</b> within a 1/2 mile radius.  Auto Check Out requires Auto Check In to be enabled.
							</p>
						</apex:pagemessage>
					</apex:outputPanel>

					<apex:outputPanel id="pulseConfigPanel2" rendered="{!(pulseSubscriptionInfoLocation == 'device' && isPrimaryPulseObject) || (pulseSubscriptionInfoLocation == 'custom' && !isPrimaryPulseObject)}" style="display:block; padding-top:10px" >	     
						<apex:pageBlockSection id="driverEventSection" showHeader="false" collapsible="false" >				
							<apex:pageBlockSectionItem helpText="The field on the map object record that will be used to set the owner of the Check In record and recorded on the Daily Summaries and Events as the driver. Must be a User lookup field or a text field that contains a User Id.">
								<apex:outputLabel value="Driver Field" />
								<apex:outputPanel layout="block">
									<span class="selectedFieldNameOutput">{!IF(PulseCheckInOwnerCSObject.api==NULL,'Not Defined',PulseCheckInOwnerCSObject.api)}</span>&nbsp;   
									<apex:inputText value="{!PulseCheckInOwnerCSObject.api}" styleClass="CSObjectValue"/>   
									<a href="#" class="openFieldSelector ownerField" data-dialogTitle="Select a Driver Field">[change]</a>
									<a href="#" class="clearSelectedField">[clear]</a>
								</apex:outputPanel>
							</apex:pageBlockSectionItem>

							<apex:pageBlockSectionItem labelStyle="min-width:250px">
								<apex:outputLabel value="Enable Auto Check In For" />
								<apex:outputPanel styleClass="checkInCheckboxList">
									<!--apex:selectCheckboxes value="{!pulseAutoCheckIn}">
										<apex:selectOptions value="{!autoCheckInOptions}"/>
									</apex:selectCheckboxes -->
									<apex:selectList value="{!pulseAutoCheckIn}" multiselect="false" size="1" id="pulseAutoCheckIn">
										<apex:selectOptions value="{!autoCheckInOptions}"/>
										<apex:actionSupport event="onchange" rerender="pulseConfigPanel2" oncomplete="createFieldSelectors();" />
									</apex:selectList>
								</apex:outputPanel>
							</apex:pageBlockSectionItem>

							<apex:pageBlockSectionItem >
								<apex:outputLabel value="Event Subscriptions" />
								<apex:outputPanel styleClass="eventCheckboxList">
									<apex:selectCheckboxes value="{!eventSubscriptions}">
										<apex:selectOptions value="{!eventSubscriptionOptions}"/>
									</apex:selectCheckboxes>
								</apex:outputPanel>
							</apex:pageBlockSectionItem>

							<apex:pageBlockSectionItem >
								<apex:outputLabel value="Enable Auto Check Out" />
								<apex:outputPanel >
									<apex:inputCheckbox value="{!pulseAutoCheckOut}" rendered="{!pulseAutoCheckIn!=''}" />
								</apex:outputPanel>
							</apex:pageBlockSectionItem>

						</apex:pageBlockSection>
					</apex:outputPanel>
				</apex:outputPanel>

			</apex:outputPanel>
		</apex:pageBlock>
		</div>
	</apex:form>

	<!-- Event Listeners -->
	<apex:outputPanel id="script">
		<script type="text/javascript">
			var selectedObject = '{!JSENCODE(mapObjectSObjectName)}';
		</script>		
	</apex:outputPanel>
	
	<style>
		body .geopointeAjaxModal{
			margin: 0 px;
		}
	
	</style>
	
	<script type="text/javascript">
		var debug = false;
		function saveComplete(){
			if (saveSuccessful) {
				var conn = new jsforce.Connection({ accessToken: '{!$API.Session_Id}' });
				if (conn == null) {
					return savePulseComplete();
				}

				// Create lookups to this Sobject on the Device Event and Device Summary objects if one doesn't exist yet
				// Then save the Map Object and Event info
				var fieldname = '{!JSENCODE(mapObjectSObjectName)}';
				if (!fieldname.endsWith('__c')) fieldname += '__c';
				var metadata = [{
					fullName: '{!JSENCODE(pulseEventObjectName)}.' + fieldname,
					externalId: false,
					label: '{!JSENCODE(mapObjectSObjectLabel)}',
					referenceTo: '{!JSENCODE(mapObjectSObjectName)}',
					relationshipLabel: 'Geopointe Device Events',
					relationshipName: 'Geopointe_Device_Events',
					deleteConstraint: 'SetNull',
					type: 'Lookup',
				},{
					fullName: '{!JSENCODE(pulseSummaryObjectName)}.' + fieldname,
					externalId: false,
					label: '{!JSENCODE(mapObjectSObjectLabel)}',
					referenceTo: '{!JSENCODE(mapObjectSObjectName)}',
					relationshipLabel: 'Geopointe Device Daily Summaries',
					relationshipName: 'Geopointe_Device_Daily_Summaries',
					deleteConstraint: 'SetNull',
					type: 'Lookup',
				}];
				return conn.metadata.create('CustomField', metadata)
						.then(function(results) {
							var rv = {errorMsgs: [], fieldsCreated: false};
							for (var i=0; i < results.length; i++) {
								var result = results[i];
								if (result.success) {
									rv.fieldsCreated = true;
									continue;
								}

								if (result.errors.statusCode != 'DUPLICATE_DEVELOPER_NAME') {
									rv.errorMsgs.push(result.errors.message);
									console.error(result.errors);
									continue;
								}
							}
							if (debug) {
								if (rv.errorMsgs.length == 0) console.log('All fields created');
								else console.log('Some errors during field creation');
							}

							return rv;
						})
						.then(function(results) {
							savePulse();
						})
						.catch(function(error) {
							alert('Error: ' + error);
							console.error(error);
							geopointeAjaxEnd();
						})
			}
			else
				savePulseComplete();
		}

		function savePulseComplete() {
			geopointeAjaxEnd(); 
			createFieldSelectors();
		}

		function populateAPIname(){
			if (jQuery('.moAPIname').val()) return;
			var displayName = jQuery('.moDisplayName').val();
			displayName = displayName.replace(/[^\w\s]/gi, '');
			displayName = displayName.replace(/  /gi, '_');
			displayName = displayName.replace(/ /gi, '_');
			jQuery('.moAPIname').val(displayName.toLowerCase());
		}

		//Make jquery in no conflict mode
		var j$ = jQuery.noConflict();
		
		j$(document).ready(function(){			
			createFieldSelectors();
						
			//Event listner to clear the lat and long fields
			j$("body").on("click",".clearSelectedField",function(e){
				
				//Update the hidden input field
				j$(this).prevAll("input").val('');
				
				//Update the displayed label
				j$(this).prevAll(".selectedFieldNameOutput").text('Not Defined');
				
				//Prevent normal hyperlink behavior
				e.preventDefault();
			});
		});
		
		function createFieldSelectors(){
			var defaultOpts = {
				'disableReference': true,
				'isFilter' : false,
				'showAll': false,
				'onSelect': function(field){

					//Update the hidden input field for field nae
					j$(this).prevAll(".CSObjectValue").val(field.fullAPIName.toLowerCase());
					
					//Update the hidden input field for the object name of the selected field
					j$(this).prevAll(".CSObjectPathValue").val(field.objectName.toLowerCase());
					
					//Update the displayed label
					j$(this).prevAll(".selectedFieldNameOutput").text(field.fullAPIName.toLowerCase());
				},
				'startObject': selectedObject,
				'title': function(e){
					return e.attr("data-dialogTitle");
				},
				getFieldsForObjectRemoteMethod: 'FieldSelector.getFieldsForObject',
				getChildObjectsRemoteMethod: 'FieldSelector.getChildObjects',
				getPicklistValuesRemoteMethod: 'FieldSelector.getPickListValues'
			};

			var accConRelOpts = {
				'isFilter' : false,
				'showAll': false,
				'onSelect': function(field){

					//Update the hidden input field for field nae
					j$(this).prevAll(".CSObjectValue").val(field.fullAPIName.toLowerCase());
					
					//Update the hidden input field for the object name of the selected field
					j$(this).prevAll(".CSObjectPathValue").val(field.objectName.toLowerCase());
					
					//Update the displayed label
					j$(this).prevAll(".selectedFieldNameOutput").text(field.fullAPIName.toLowerCase());
				},
				'startObject': selectedObject,
				'title': function(e){
					return e.attr("data-dialogTitle");
				},
				getFieldsForObjectRemoteMethod: 'FieldSelector.getFieldsForObject',
				getChildObjectsRemoteMethod: 'FieldSelector.getChildObjects',
				getPicklistValuesRemoteMethod: 'FieldSelector.getPickListValues'
			};

			//Create event listener that will open the field selector
			j$(".openFieldSelector.datetime").fieldSelector(j$.extend({typeLimit: ['DATETIME']}, defaultOpts));

			j$(".openFieldSelector.number").fieldSelector(j$.extend({typeLimit: ['DOUBLE']}, defaultOpts));

			j$(".openFieldSelector.latlng").fieldSelector(j$.extend({typeLimit: ['DOUBLE', 'STRING']}, defaultOpts));

			j$(".openFieldSelector.location").fieldSelector(j$.extend({typeLimit: ['LOCATION']}, defaultOpts));

			j$(".openFieldSelector.string").fieldSelector(j$.extend({typeLimit: ['STRING', 'TEXTAREA', 'COMBOBOX']}, defaultOpts));

			j$(".openFieldSelector.addressField").fieldSelector(j$.extend({typeLimit: ['STRING', 'TEXTAREA', 'PICKLIST']}, defaultOpts));
			
			j$(".openFieldSelector.ownerField").fieldSelector(j$.extend({typeLimit: ['STRING', 'REFERENCE (ID)']}, defaultOpts));
			
			j$(".openFieldSelector.accconrel").fieldSelector(accConRelOpts);
		}
	</script>
</apex:page>