<apex:page controller="geopointe.ChangeOwner_Controller" showHeader="false" sidebar="false" extensions="geopointe.RemoteAction" standardStylesheets="true" tabStyle="Lead" title="Geopointe - Change Owner" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/css/common/common.css')}"/><!-- Geopointe common css -->
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__jquery, '/css/common/common-lightning.css')}"/> <!-- Common geopointe CSS for lightning styled pages--> 
    <apex:stylesheet value="https://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"/> <!--Font awesome library for icons and such -->
    <apex:stylesheet value="{!URLFOR($Resource.geopointe__SLDS, '/0.8.0/assets/styles/salesforce-lightning-design-system-vf.min.css')}"/> <!-- Salesforce Lightning Design System -->
    <style>
        .slds td.pbButtonb { text-align: center; }
    </style>

    <apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/jquery-1.8.3.min.js')}" /> <!-- core jQuery -->
    <script src="{!URLFOR($Resource.jquery, '/js/lib/async.js')}"></script> <!-- async.js for help with asynchronous flow control -->

    <!-- localize.js -->
    <script src="https://cdn.localizejs.com/localize.js"></script>
    <script>!function(a){if(!a.Localize){a.Localize={};for(var e=["translate","untranslate","phrase","initialize","translatePage","setLanguage","getLanguage","detectLanguage","untranslatePage","bootstrap","prefetch","on","off"],t=0;t<e.length;t++)a.Localize[e[t]]=function(){}}}(window);</script>

    <script>
        Localize.initialize({
            key: '1SeX6sYAXWLng', 
            rememberLanguage: false,
            saveNewPhrases: false,
            translateBody: true
        });
        Localize.setLanguage('{!userLanguage}');
    </script>

    <apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/jquery-1.8.3.min.js')}" /> <!-- core jQuery -->
    <apex:includeScript value="{!URLFOR($Resource.geopointe__jquery, '/ui/js/jquery-ui-1.9.2.custom.min.js')}" /> <!-- jQuery UI -->
    <apex:includeScript value="{!$Resource.geopointe__GeopointeJS}" /> <!-- Geopointe universal functions -->
    <apex:includeScript value="{!$Page.geopointe__js_GA}" /> <!-- Google Analytics --> 

    <div class="slds">
    <apex:form >
        <apex:outputPanel id="renderAll">
            <apex:outputPanel rendered="{!idArrayPresent=false}" layout="block" style="min-height:100px;">
                <apex:outputPanel styleClass="slds-card__body slds-text-body--small slds-p-horizontal--medium">
                    <br/>Please include Data Set records before applying this action.
                </apex:outputPanel>
            </apex:outputPanel>

            <apex:outputPanel id="pageMessages">
                <apex:pageMessages id="pageMessageError"/>
            </apex:outputPanel>

            <apex:outputPanel rendered="{!idArrayPresent=true}" id="updateRecordsPanel">
                <apex:inputTextarea id="updateSetsText" style="display:none"/>
                <apex:repeat value="{!updateSets}" var="theKey">
                    <div class="slds-card slds-m-bottom--medium">
                        <header class="slds-card__header slds-grid">
                            <h3 class="slds-text-heading--small slds-truncate">{!updateSets[theKey].objectLabelPlural}: {!updateSets[theKey].numOfRecords} record(s)</h3>
                        </header>

                        <section class="slds-card__body slds-text-body--small slds-p-horizontal--medium">
                            <apex:outputPanel rendered="{!updateSets[theKey].uiStatus=='NOUPDATE'}">
                                You do not have permission to change owner for these <var>{!updateSets[theKey].objectLabel}</var> records.
                            </apex:outputPanel>

                            <apex:outputPanel rendered="{!AND(NOT(processingComplete), updateSets[theKey].uiStatus=='NOBULKTRANSFER', OR('case' == updateSets[theKey].objectName, 'lead' == updateSets[theKey].objectName))}">
                                You do not have bulk Transfer <var>{!updateSets[theKey].objectLabelPlural}</var> permission.
                            </apex:outputPanel>

                            <apex:outputPanel rendered="{!AND(NOT(processingComplete), updateSets[theKey].uiStatus=='NOBULKTRANSFER', NOT(OR('case' == updateSets[theKey].objectName, 'lead' == updateSets[theKey].objectName)))}">
                                You do not have bulk Transfer Record permission for <var>{!updateSets[theKey].objectLabelPlural}</var>.
                            </apex:outputPanel>

                            <apex:outputPanel rendered="{!updateSets[theKey].uiStatus=='NOOWNER'}">
                                This object does not contain an Owner field.
                            </apex:outputPanel>

                            <apex:outputPanel rendered="{!updateSets[theKey].uiStatus=='OK' && processingComplete=false}">
                                <div class="uiInput uiInputText uiInput--default uiInput--input">
                                    <apex:outputLabel styleClass="label inputLabel uiLabel-left form-element__label uiLabel notranslate" value="New Owner"/>
                                    <apex:inputField value="{!updateSets[theKey].userLookup.OwnerId}" required="false" styleClass="notranslate input"/>
                                </div>
                            </apex:outputPanel>

                            <apex:outputPanel rendered="{!updateSets[theKey].uiStatus=='OK' && processingComplete=true}">
                                <var>{!updateSets[theKey].numOfUpdatedRecords}</var> records successfully updated. <br/>
                                <var>{!updateSets[theKey].numOfErroredRecords}</var> records had errors.
                            </apex:outputPanel>
                        </section>
                    </div>
                </apex:repeat>

                <apex:outputPanel >
                    <apex:actionStatus id="updateButtonStatus">
                        <apex:facet name="start">
                            Processing <var>{!totalRecordCount}</var> records...
                        </apex:facet>
                        <apex:facet name="stop">
                            <apex:outputPanel id="resultsReportPanel">
                                <apex:outputPanel rendered="{!AND(processingRequired, NOT(processingComplete))}" layout="block" style="text-align:center">
                                    <button id="commitButton" class="slds-button slds-button--neutral" onclick="rerenderInputStringValueAndSave();return false;">
                                        Change Owner
                                    </button>
                                </apex:outputPanel>
                                <!-- Render disabled button as separate button, per JV due to ancient VF bug -->
                                <apex:outputPanel rendered="{!AND(NOT(processingRequired), NOT(processingComplete))}" layout="block" style="text-align:center">
                                    <button id="commitButton" class="slds-button slds-button--neutral" disabled="true">
                                        Change Owner
                                    </button>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!AND(processingComplete, recCountSuccess == recCountTotal)}">
                                    <div class="slds-card slds-m-bottom--medium">
                                        <section class="slds-card__body slds-p-horizontal--medium">
                                            <div><i class="fa fa-check-circle"></i> <b>Change Owner was successful!</b></div>
                                            <apex:outputPanel >
                                                <b><var>{!recCountSuccess}</var> of <var>{!recCountTotal}</var> record(s)</b> were updated.<br/>
                                            </apex:outputPanel>
                                        </section>
                                    </div>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!AND(processingComplete, recCountSuccess < recCountTotal)}">
                                    <div class="slds-card slds-m-bottom--medium">
                                        <section class="slds-card__body slds-p-horizontal--medium">
                                            <div><i class="fa fa-warning"></i> <b>Change Owner completed with errors.</b></div>
                                            <apex:outputPanel >
                                                <b><var>{!recCountSuccess}</var> of <var>{!recCountTotal}</var> record(s)</b> were updated.<br/>
                                            </apex:outputPanel>
                                        </section>
                                    </div>
                                    <div class="slds-card slds-m-bottom--medium">
                                        <section class="slds-card__body slds-p-horizontal--medium">
                                            <apex:outputPanel >
                                            <div><b>The following errors occured:</b></div>
                                            <div id="renderErrorReport"></div>
                                            </apex:outputPanel>
                                        </section>
                                    </div>
                                </apex:outputPanel>
                            </apex:outputPanel>
                        </apex:facet>
                    </apex:actionStatus>
                </apex:outputPanel>
                <apex:actionFunction name="rerenderInputStringValueAndSave" rerender="pageMessages, updateSetsJS" action="{!renderUpdateSets}" oncomplete="changeOwnerRecordsBatch();return false;"/>
                <apex:actionFunction name="changeOwnerComplete" action="{!changeOwnerCompleteAction}" rerender="resultsReportPanel" oncomplete="jQuery('#renderErrorReport').html(renderedReport);return false;">
                    <apex:param name="recCountSuccess" assignTo="{!recCountSuccess}" value=""/>
                    <apex:param name="recCountTotal" assignTo="{!recCountTotal}" value=""/>
                </apex:actionFunction>
            </apex:outputPanel>
        </apex:outputPanel>
    </apex:form>
    </div>

    <apex:outputPanel id="hiddenRerenderPanel">
        <apex:outputPanel id="updateSetsJS">
            <script type="text/javascript">
                var updateSetsVar = '{!updateSetsJSON}';
                jQuery("textarea[id$='updateSetsText']").val(updateSetsVar);
                // this structure should be returned from the remote call as JSON in 'result'
                // and batch results should be added to this accumulator for eventual reporting
                var resultsMessage = {
                    recCountSuccess: 0,
                    recCountTotal: 0,
                    recMessageFail: []
                    //    { 'Id': recordId, 'Errors': ['id1', 'id2'] } // just for example...
                };
                var renderedReport = '';
            </script>
        </apex:outputPanel>

        <script type="text/javascript">
            function changeOwnerRecordsBatch() {
                var updateSets = JSON.parse(updateSetsVar);
                var recCount = 0;
                for (var setPrefix in updateSets) {
                    if (updateSets.hasOwnProperty(setPrefix)) {
                        recCount += updateSets[setPrefix].idArray.length;
                    }
                };

                var CHUNKSIZE = 100;
                var CHUNKSIZE_MIN = 25;
                var startMsg = 'Processing ' + recCount + ' records...';

                var tryBatchProcess = function(useChunkSize) {
                    var numOfBatches = 0;
                    geopointeAjaxStart('body', startMsg);

                    var q = async.queue(function (task, callback) {
                        //Calculate and update completion percent in ajax spinner
                        var percentComplete = Math.round( (1 - (q.length() + 1) / numOfBatches) * 100 );

                        jQuery('.geopointeAjaxImgPercent').text(percentComplete + "%");

                        console.info('Change Owner Update Set: ');
                        console.info(task);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RemoteAction.doRemoteAction}',
                            'ChangeOwner_Controller.changeOwnerBatch',
                            { updateSetsJSON: JSON.stringify(task.updateSets) },
                            function(result, event) {
                                if (event.status) {
                                    // accumulate results for final output report
                                    var currentResult = JSON.parse(result);
                                    var preSuccess = Number(resultsMessage['recCountSuccess']);
                                    var preTotal = Number(resultsMessage['recCountTotal']);
                                    var preErrorById = resultsMessage['recMessageFail'];
                                    var newSuccess = Number(currentResult['recCountSuccess']);
                                    var newTotal = Number(currentResult['recCountTotal']);
                                    var newErrorById = currentResult['recMessageFail'];
                                    for (var id in newErrorById) {
                                        preErrorById.push({'Id': id, 'Errors': newErrorById[id]});
                                    }
                                    resultsMessage = {
                                        recCountSuccess: Number(preSuccess + newSuccess),
                                        recCountTotal: Number(preTotal + newTotal),
                                        recMessageFail: preErrorById
                                    };
                                }
                                else {
                                    geopointeAjaxEnd();
                                    if (q.kill) q.kill();
                                    else {  // q.kill() not defined? terminate processing by hand
                                        q.tasks = [];
                                        q.drain = null;
                                    }
                                    if (event.message === 'Apex CPU time limit exceeded' && useChunkSize > CHUNKSIZE_MIN) {
                                        startMsg = 'Processing ' + recCount + ' records with reduced batch size...';
                                        setTimeout(tryBatchProcess(useChunkSize * 0.5), 0);
                                    }
                                    else {
                                        alert('Something didn\'t quite work right: ' + event.message);
                                    }
                                }
                                if (callback) callback();
                            },
                            {escape: false, timeout: 120000, buffer: false}
                        );
                    }, 1); //Has to be 1 due to dml row locking issues

                    // Called when the queue is completely processed
                    q.drain = function() {
                        jQuery('.geopointeAjaxImgPercent').text('100%');
                        renderResultsReport();
                        geopointeAjaxEnd();
                    }

                    // Load up the queue
                    var chunkUpdates = {};
                    var recordsInChunk = 0;
                    for (var objPrefix in updateSets) {
                        if (updateSets.hasOwnProperty(objPrefix)) {
                            var recordsInPrefixAlreadyPushed = 0;
                            var srcSet = updateSets[objPrefix];
                            chunkUpdates[objPrefix] = {
                                "prefix":            srcSet.prefix,
                                "objectName":        srcSet.objectName,
                                "objectLabel":       srcSet.objectLabel,
                                "objectLabelPlural": srcSet.objectLabelPlural,
                                "newOwnerId":        srcSet.newOwnerId,
                                "hasOwnerField":     srcSet.hasOwnerField,
                                "isUpdateable":      srcSet.isUpdateable,
                                "idArray":           []
                            };
                            for (var ix = 0; ix < updateSets[objPrefix].idArray.length; ix++) {
                                chunkUpdates[objPrefix].idArray.push(updateSets[objPrefix].idArray[ix]);
                                if (++recordsInChunk == useChunkSize) {
                                    numOfBatches++;
                                    //console.log('push: ', chunkUpdates);
                                    q.push({updateSets: chunkUpdates}, function(err) {
                                        if (err) {
                                            console.log(err);
                                        }
                                    });
                                    // reset chunk object with a fresh updateSet for the rest of the records
                                    chunkUpdates = {};
                                    recordsInChunk = 0;
                                    chunkUpdates[objPrefix] = {
                                        "prefix":            srcSet.prefix,
                                        "objectName":        srcSet.objectName,
                                        "objectLabel":       srcSet.objectLabel,
                                        "objectLabelPlural": srcSet.objectLabelPlural,
                                        "newOwnerId":        srcSet.newOwnerId,
                                        "hasOwnerField":     srcSet.hasOwnerField,
                                        "isUpdateable":      srcSet.isUpdateable,
                                        "idArray":           []
                                    };
                                }
                            }
                        }
                    }

                    // Add last chunk of ids
                    if (recordsInChunk > 0) {
                        numOfBatches++;
                        //console.log('last push: ', chunkUpdates);
                        q.push({updateSets: chunkUpdates}, function(err) {
                            if (err) {
                                console.log(err);
                            }   
                        });
                    }
                };

                var startChunkSize = CHUNKSIZE;
                while (startChunkSize > (recCount * 2) && startChunkSize > CHUNKSIZE_MIN) {
                    startChunkSize *= 0.5;    // don't shrink+retry more than necessary
                }
                tryBatchProcess(startChunkSize);

            }

            function renderResultsReport() {
                var recSuccess = resultsMessage['recCountSuccess'];
                var recTotal = resultsMessage['recCountTotal'];
                var errorMaps = resultsMessage['recMessageFail'];
                var recMsgs = '';   // render for display - apex:param just stores the string until after rerender
                if (errorMaps.length > 0) {
                    for (var err = 0; err < errorMaps.length; ++err) {
                        var recErr = errorMaps[err];
                        if (recErr["Id"]) {
                            var callIt = recErr['Id'].split(':');
                            recMsgs += '<a href=/' + callIt[0] + ' target="_blank">' + callIt[1] + '</a>:';
                            for (var msg = 0; msg < recErr["Errors"].length; ++msg) {
                                recMsgs += '&nbsp;&nbsp;' + recErr["Errors"][msg] + '<br/>';
                            }
                        }
                    }
                }
                renderedReport = recMsgs;
                changeOwnerComplete(recSuccess, recTotal);
            }
        </script>
    </apex:outputPanel>
</apex:page>